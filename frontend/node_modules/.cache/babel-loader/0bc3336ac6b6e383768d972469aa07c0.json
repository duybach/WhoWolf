{"ast":null,"code":"var _jsxFileName = \"/home/duybach/Desktop/whowolf-gui/src/components/Chat.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nconst Chat = ({\n  socket,\n  lobby,\n  dispatch\n}) => {\n  const [chat, setChat] = useState([]);\n  const [chatMessageInput, setChatMessageInput] = useState('');\n  const [chatTimeout, setChatTimeout] = useState(false);\n  const fetchChat = useCallback(() => {\n    socket.on('chat', message => {\n      console.log(`Message received: ${message.chatMessage}`);\n      setChat(chat => [...chat, message.chatMessage]);\n    });\n  }, []);\n  useEffect(() => {\n    fetchChat();\n  }, [fetchChat]);\n\n  const sendChatMessage = e => {\n    if (!chatTimeout) {\n      socket.emit('chat', lobby.id, chatMessageInput);\n      setChatMessageInput('');\n      setChatTimeout(true);\n      setTimeout(() => setChatTimeout(false), 1000);\n    } else {\n      console.log('blocked');\n    }\n\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, chat.map((item, index) => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, item))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: sendChatMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"chatMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    value: chatMessageInput,\n    onChange: e => setChatMessageInput(e.target.value),\n    type: \"text\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"Enter\")))));\n};\n\nconst mapStateToProps = state => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Chat);","map":{"version":3,"sources":["/home/duybach/Desktop/whowolf-gui/src/components/Chat.js"],"names":["React","useCallback","useEffect","useState","connect","Button","Container","Col","Form","ListGroup","Row","Chat","socket","lobby","dispatch","chat","setChat","chatMessageInput","setChatMessageInput","chatTimeout","setChatTimeout","fetchChat","on","message","console","log","chatMessage","sendChatMessage","e","emit","id","setTimeout","preventDefault","map","item","index","target","value","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nconst Chat = ({ socket, lobby, dispatch }) => {\n  const [chat, setChat] = useState([]);\n  const [chatMessageInput, setChatMessageInput] = useState('');\n  const [chatTimeout, setChatTimeout] = useState(false);\n\n  const fetchChat = useCallback(() => {\n    socket.on('chat', (message) => {\n      console.log(`Message received: ${message.chatMessage}`);\n      setChat(chat => [...chat, message.chatMessage]);\n    });\n  }, [])\n\n  useEffect(() => {\n    fetchChat();\n  }, [fetchChat]);\n\n  const sendChatMessage = e => {\n    if (!chatTimeout) {\n      socket.emit('chat', lobby.id, chatMessageInput);\n      setChatMessageInput('');\n      setChatTimeout(true);\n\n      setTimeout(() => setChatTimeout(false), 1000);\n    } else {\n      console.log('blocked');\n    }\n\n    e.preventDefault();\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <ListGroup>\n            {chat.map((item, index) => (\n              <ListGroup.Item key={index}>{item}</ListGroup.Item>\n            ))}\n          </ListGroup>\n        </Col>\n      </Row>\n     \n      <Row>\n        <Col>\n          <Form onSubmit={sendChatMessage}>\n            <Form.Group controlId=\"chatMessage\">\n              <Form.Control value={chatMessageInput} onChange={e => setChatMessageInput(e.target.value)} type=\"text\" required />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">Enter</Button>\n          </Form>\n        </Col>\n      </Row> \n    </Container>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  socket: state.socket,\n  lobby: state.lobby\n})\n\nexport default connect(mapStateToProps)(Chat);\n"]},"metadata":{},"sourceType":"module"}