{"ast":null,"code":"var _jsxFileName = \"/home/duybach/Desktop/whowolf-gui/src/components/Game.js\";\nimport React, { useCallback, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport Chat from './Chat';\nimport { setLobby } from '../actions';\n\nconst Game = ({\n  socket,\n  lobby,\n  dispatch\n}) => {\n  const history = useHistory();\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', lobby.id, message => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        dispatch(setLobby(message));\n      }\n    });\n    socket.on('lobbyStatus', message => {\n      dispatch(setLobby(message));\n    });\n  }, [socket, dispatch, lobby.id]);\n\n  const pickPlayer = (playerId, action) => {\n    socket.emit('game', lobby.id, action, {\n      playerId: playerId\n    });\n  };\n\n  const renderActionButtons = playerId => {\n    if (lobby.players[socket.id].status !== 'PLAYER_ALIVE' || lobby.players[playerId].status !== 'PLAYER_ALIVE' || lobby.game.phase === 1 && lobby.players[socket.id].role !== 'WERWOLF' || lobby.game.phase === 2 && lobby.players[socket.id].role !== 'WITCH') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (lobby.game.phase === 0) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== playerId ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(playerId, 'PLAYER_VOTE'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 37\n        }\n      }, \"VOTE\") : '');\n    } else if (lobby.game.phase === 1 && lobby.players[socket.id].role === 'WERWOLF') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== playerId ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(playerId, 'PLAYER_KILL'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 37\n        }\n      }, \"KILL\") : '');\n    } else if (lobby.game.phase === 2 && lobby.players[socket.id].role === 'WITCH' && lobby.game.werwolfTarget === playerId) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== playerId ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(playerId, 'PLAYER_HEAL'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 37\n        }\n      }, \"HEAL\") : '');\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  };\n\n  const tickTime = useCallback(() => {\n    if (lobby.game.timeLeft > 0) {\n      dispatch(updateLobbyGameTimeLeft(lobby.game.timeLeft - 1));\n    }\n  }, []);\n  useEffect(() => {\n    if (lobby.status === 'GAME_END') {\n      history.push(`/game_end/${lobby.id}`);\n    }\n\n    fetchLobby();\n    setInterval(tickTime, 1000);\n  }, [fetchLobby, history, lobby.id, lobby.status, tickTime]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Game \", lobby.id), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Host: \", lobby.hostId), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"Time: \", lobby.game.phase === 0 ? 'day time' : 'night time', \" (\", lobby.game.round, \".\", lobby.game.phase, \")\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Time left: \", lobby.game.timeLeft, \"s\"), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, Object.keys(lobby.players).map((playerId, index) => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    key: index,\n    active: lobby.players[socket.id].targetPlayerId === playerId ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, lobby.players[playerId].alias, \" (\", lobby.players[playerId].role, \" | \", lobby.players[playerId].status, \")\", renderActionButtons(playerId)))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chat, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = state => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Game);","map":{"version":3,"sources":["/home/duybach/Desktop/whowolf-gui/src/components/Game.js"],"names":["React","useCallback","useEffect","useHistory","connect","Button","Col","Container","ListGroup","Row","Chat","setLobby","Game","socket","lobby","dispatch","history","fetchLobby","emit","id","message","console","log","error","on","pickPlayer","playerId","action","renderActionButtons","players","status","game","phase","role","werwolfTarget","tickTime","timeLeft","updateLobbyGameTimeLeft","push","setInterval","hostId","round","Object","keys","map","index","targetPlayerId","alias","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport Chat from './Chat';\n\nimport { setLobby } from '../actions';\n\nconst Game = ({ socket, lobby, dispatch }) => {\n  const history = useHistory();\n\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', lobby.id, (message) => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        dispatch(setLobby(message));\n      }\n    });\n\n    socket.on('lobbyStatus', (message) => {\n      dispatch(setLobby(message));\n    });\n  }, [socket, dispatch, lobby.id]);\n\n  const pickPlayer = (playerId, action) => {\n    socket.emit('game', lobby.id, action, { playerId: playerId });\n  };\n\n  const renderActionButtons = (playerId) => {\n    if (lobby.players[socket.id].status !== 'PLAYER_ALIVE' || lobby.players[playerId].status !== 'PLAYER_ALIVE' || (lobby.game.phase === 1 && lobby.players[socket.id].role !== 'WERWOLF') || (lobby.game.phase === 2 && lobby.players[socket.id].role !== 'WITCH')) {\n      return (<></>);\n    }\n\n    if (lobby.game.phase === 0) {\n      return (\n        <>\n          {socket.id !== playerId ? <Button variant=\"danger\" onClick={() => pickPlayer(playerId, 'PLAYER_VOTE')}>VOTE</Button> : ''}\n        </>\n      );\n    } else if (lobby.game.phase === 1 && lobby.players[socket.id].role === 'WERWOLF') {\n      return (\n        <>\n          {socket.id !== playerId ? <Button variant=\"danger\" onClick={() => pickPlayer(playerId, 'PLAYER_KILL')}>KILL</Button> : ''}\n        </>\n      );\n    } else if (lobby.game.phase === 2 && lobby.players[socket.id].role === 'WITCH' && lobby.game.werwolfTarget === playerId) {\n      return (\n        <>\n          {socket.id !== playerId ? <Button variant=\"danger\" onClick={() => pickPlayer(playerId, 'PLAYER_HEAL')}>HEAL</Button> : ''}\n        </>\n      );\n    } else {\n      return (<></>);\n    }\n  };\n\n  const tickTime = useCallback(() => {\n    if (lobby.game.timeLeft > 0) {\n      dispatch(updateLobbyGameTimeLeft(lobby.game.timeLeft - 1));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (lobby.status === 'GAME_END') {\n      history.push(`/game_end/${lobby.id}`);\n    }\n\n    fetchLobby();\n\n    setInterval(tickTime, 1000);\n  }, [fetchLobby, history, lobby.id, lobby.status, tickTime]);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>Game {lobby.id}</h1>\n          <h3>Host: {lobby.hostId}</h3>\n          <h3>Time: {lobby.game.phase === 0 ? 'day time' : 'night time'} ({lobby.game.round}.{lobby.game.phase})</h3>\n          <h3>Time left: {lobby.game.timeLeft}s</h3>\n\n          <ListGroup>\n            {\n              Object.keys(lobby.players).map((playerId, index) => (\n                <ListGroup.Item key={index} active={lobby.players[socket.id].targetPlayerId === playerId ? true : false}>\n                  {lobby.players[playerId].alias} ({lobby.players[playerId].role} | {lobby.players[playerId].status})\n                  {renderActionButtons(playerId)}\n                </ListGroup.Item>\n              ))\n            }\n          </ListGroup>\n        </Col>\n      </Row>\n\n      <Row>\n        <Chat />\n      </Row>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}