{"ast":null,"code":"var _jsxFileName = \"/home/duybach/Desktop/whowolf-gui/src/components/Lobby.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport Chat from './Chat';\nimport { setLobby } from '../actions';\n\nconst Lobby = ({\n  socket,\n  lobby,\n  dispatch\n}) => {\n  const history = useHistory();\n  const [playerReady, setPlayerReady] = useState(false);\n  const [hostAlias, setHostAlias] = useState('');\n\n  const setPlayerStatus = status => {\n    setPlayerReady(status);\n    socket.emit('lobby', 'PLAYER_READY', {\n      status: status\n    });\n  };\n\n  const kickPlayer = playerId => {\n    socket.emit('lobby', 'KICK_PLAYER', {\n      playerId: playerId\n    });\n  };\n\n  const startGame = () => {\n    if (Object.keys(lobby.players).length >= 1) {\n      socket.emit('lobby', 'START_GAME');\n    } else {\n      alert('4 or more players are required to start the game.');\n    }\n  };\n\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', message => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        dispatch(setLobby(message));\n        setHostAlias(message.players.find(player => {\n          return player.id === socket.id;\n        }).alias);\n      }\n\n      socket.on('lobbyStatus', message => {\n        dispatch(setLobby(message));\n        setHostAlias(message.players.find(player => {\n          return player.id === socket.id;\n        }).alias);\n      });\n    });\n  }, [socket, dispatch]);\n  useEffect(() => {\n    if (lobby.status === 'GAME') {\n      history.push(`/game/${lobby.id}`);\n    }\n\n    fetchLobby();\n  }, [fetchLobby, history, lobby.status, lobby.id]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Lobby \", lobby.id), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Host: \", hostAlias), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, Object.keys(lobby.players).map((idx, index) => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    key: index,\n    variant: lobby.players[idx].status === 'PLAYER_READY' ? 'success' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, lobby.players[idx].alias, \" \", socket.id === lobby.hostId ? /*#__PURE__*/React.createElement(Button, {\n    className: \"pull-right\",\n    variant: \"danger\",\n    onClick: () => kickPlayer(idx),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 76\n    }\n  }, \"X\") : ''))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: playerReady ? 'danger' : 'primary',\n    onClick: () => setPlayerStatus(!playerReady),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, playerReady ? 'Not ready' : 'Ready')), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, socket.id === lobby.hostId ? /*#__PURE__*/React.createElement(Button, {\n    variant: lobby.status === 'LOBBY_READY' ? 'primary' : 'danger',\n    onClick: () => startGame(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 41\n    }\n  }, \"Start\") : '')), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chat, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = state => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Lobby);","map":{"version":3,"sources":["/home/duybach/Desktop/whowolf-gui/src/components/Lobby.js"],"names":["React","useCallback","useEffect","useState","useHistory","connect","Button","Col","Container","ListGroup","Row","Chat","setLobby","Lobby","socket","lobby","dispatch","history","playerReady","setPlayerReady","hostAlias","setHostAlias","setPlayerStatus","status","emit","kickPlayer","playerId","startGame","Object","keys","players","length","alert","fetchLobby","message","console","log","error","find","player","id","alias","on","push","map","idx","index","hostId","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport Chat from './Chat';\n\nimport { setLobby } from '../actions';\n\nconst Lobby = ({ socket, lobby, dispatch }) => {\n  const history = useHistory();\n  const [playerReady, setPlayerReady] = useState(false);\n  const [hostAlias, setHostAlias] = useState('');\n\n  const setPlayerStatus = (status) => {\n    setPlayerReady(status);\n    socket.emit('lobby', 'PLAYER_READY', { status: status });\n  };\n\n  const kickPlayer = (playerId) => {\n    socket.emit('lobby', 'KICK_PLAYER', { playerId: playerId });\n  };\n\n  const startGame = () => {\n    if (Object.keys(lobby.players).length >= 1) {\n      socket.emit('lobby', 'START_GAME');\n    } else {\n      alert('4 or more players are required to start the game.')\n    }\n  }\n\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', (message) => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        dispatch(setLobby(message));\n\n        setHostAlias(\n          message.players.find((player) => {\n            return player.id === socket.id;\n          }).alias\n        );\n      }\n\n      socket.on('lobbyStatus', (message) => {\n        dispatch(setLobby(message));\n\n        setHostAlias(\n          message.players.find((player) => {\n            return player.id === socket.id;\n          }).alias\n        );\n      });\n    });\n  }, [socket, dispatch]);\n\n  useEffect(() => {\n    if (lobby.status === 'GAME') {\n      history.push(`/game/${lobby.id}`);\n    }\n\n    fetchLobby();\n  }, [fetchLobby, history, lobby.status, lobby.id]);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>Lobby {lobby.id}</h1>\n\n          <h3>\n            Host: {hostAlias}\n          </h3>\n\n          <ListGroup>\n            {\n              Object.keys(lobby.players).map((idx, index) => (\n                <ListGroup.Item key={index} variant={lobby.players[idx].status === 'PLAYER_READY' ? 'success' : ''}>\n                  {lobby.players[idx].alias} {socket.id === lobby.hostId ? <Button className=\"pull-right\" variant=\"danger\" onClick={() => kickPlayer(idx)}>X</Button> : ''}\n                </ListGroup.Item>\n              ))\n            }\n          </ListGroup>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Button variant={playerReady ? 'danger' : 'primary'} onClick={() => setPlayerStatus(!(playerReady))}>{playerReady ? 'Not ready' : 'Ready'}</Button>\n        </Col>\n        <Col>\n          {socket.id === lobby.hostId ? <Button variant={lobby.status === 'LOBBY_READY' ? 'primary' : 'danger'} onClick={() => startGame()}>Start</Button> : ''}\n        </Col>\n      </Row>\n\n      <Row>\n        <Chat />\n      </Row>\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  socket: state.socket,\n  lobby: state.lobby\n})\n\nexport default connect(mapStateToProps)(Lobby);\n"]},"metadata":{},"sourceType":"module"}