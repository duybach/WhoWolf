{"ast":null,"code":"var _jsxFileName = \"/home/duybach/Desktop/whowolf-gui/src/components/Game.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport Chat from './Chat';\nimport { setLobby, reduceLobbyGameTimeLeft } from '../actions';\n\nconst Game = ({\n  socket,\n  lobby,\n  dispatch\n}) => {\n  const history = useHistory();\n  const [user, setUser] = useState({});\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', message => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        dispatch(setLobby(message));\n        setUser(message.players.find(player => {\n          return player.id === socket.id;\n        }));\n      }\n    });\n    socket.on('lobbyStatus', message => {\n      console.log(message);\n      dispatch(setLobby(message));\n      setUser(message.players.find(player => {\n        return player.id === socket.id;\n      }));\n    });\n  }, [socket, dispatch]);\n\n  const pickPlayer = (playerId, action) => {\n    socket.emit('game', action, {\n      playerId: playerId\n    });\n  };\n\n  const renderActionButtons = playerId => {\n    if (lobby.game.round === 0 && lobby.game.phase === 0 || user.status !== 'PLAYER_ALIVE' || lobby.players[playerId].status !== 'PLAYER_ALIVE' || lobby.game.phase === 1 && user.role !== 'WERWOLF' || lobby.game.phase === 2 && user.role !== 'WITCH') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (lobby.game.phase === 0) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== lobby.players[playerId].id ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(lobby.players[playerId].id, 'PLAYER_VOTE'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 55\n        }\n      }, \"VOTE\") : '');\n    } else if (lobby.game.phase === 1 && user.role === 'WERWOLF') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== lobby.players[playerId].id ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(lobby.players[playerId].id, 'PLAYER_KILL'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 55\n        }\n      }, \"KILL\") : '');\n    } else if (lobby.game.phase === 2 && user.role === 'WITCH' && user.healLeft > 0 && lobby.game.werwolfTarget === lobby.players[playerId].id) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== lobby.players[playerId].id ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(lobby.players[playerId].id, 'PLAYER_HEAL'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 55\n        }\n      }, \"HEAL\") : '');\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  };\n\n  const renderPhase = phase => {\n    switch (phase) {\n      case 0:\n        return 'Voting Phase';\n\n      case 1:\n        return 'Werwolf Phase';\n\n      case 2:\n        return 'Healing Phase';\n\n      default:\n        return '';\n    }\n  };\n\n  const tickTime = useCallback(() => {\n    dispatch(reduceLobbyGameTimeLeft(1));\n  }, [dispatch]);\n  useEffect(() => {\n    if (lobby.status === 'GAME_END') {\n      history.push(`/game_end/${lobby.id}`);\n    }\n\n    fetchLobby();\n    const lobbyIntervalId = setInterval(tickTime, 1000);\n    return () => {\n      clearInterval(lobbyIntervalId);\n    };\n  }, [fetchLobby, history, lobby.id, lobby.status, tickTime]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \"Game \", lobby.id), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \"Time: \", lobby.game.phase === 0 ? 'day time' : 'night time', \" (\", renderPhase(lobby.game.phase), \")\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \"Round: \", lobby.game.round), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Time left: \", lobby.game.timeLeft, \"s\"), user.role === 'WITCH' ? /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 36\n    }\n  }, \"Heal left: \", user.healLeft) : '', /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, Object.keys(lobby.players).map((idx, index) => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    className: \"d-flex justify-content-between align-items-center\",\n    key: index,\n    active: user.targetPlayerId === lobby.players[idx].id ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, lobby.players[idx].alias, \" (\", lobby.players[idx].id === socket.id ? `${lobby.players[idx].role} | ` : '', lobby.players[idx].status, \")\", renderActionButtons(idx)))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chat, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = state => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Game);","map":{"version":3,"sources":["/home/duybach/Desktop/whowolf-gui/src/components/Game.js"],"names":["React","useCallback","useEffect","useState","useHistory","connect","Button","Col","Container","ListGroup","Row","Chat","setLobby","reduceLobbyGameTimeLeft","Game","socket","lobby","dispatch","history","user","setUser","fetchLobby","emit","message","console","log","error","players","find","player","id","on","pickPlayer","playerId","action","renderActionButtons","game","round","phase","status","role","healLeft","werwolfTarget","renderPhase","tickTime","push","lobbyIntervalId","setInterval","clearInterval","timeLeft","Object","keys","map","idx","index","targetPlayerId","alias","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SAASC,QAAT,EAAmBC,uBAAnB,QAAkD,YAAlD;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA;AAAjB,CAAD,KAAiC;AAC5C,QAAMC,OAAO,GAAGd,UAAU,EAA1B;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMkB,UAAU,GAAGpB,WAAW,CAAC,MAAM;AACnCc,IAAAA,MAAM,CAACO,IAAP,CAAY,aAAZ,EAA4BC,OAAD,IAAa;AACtC,UAAI,WAAWA,OAAf,EAAwB;AACtBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,KAApB;AACD,OAFD,MAEO;AACLT,QAAAA,QAAQ,CAACL,QAAQ,CAACW,OAAD,CAAT,CAAR;AAEAH,QAAAA,OAAO,CACLG,OAAO,CAACI,OAAR,CAAgBC,IAAhB,CAAsBC,MAAD,IAAY;AAC/B,iBAAOA,MAAM,CAACC,EAAP,KAAcf,MAAM,CAACe,EAA5B;AACD,SAFD,CADK,CAAP;AAKD;AACF,KAZD;AAcAf,IAAAA,MAAM,CAACgB,EAAP,CAAU,aAAV,EAA0BR,OAAD,IAAa;AACpCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAN,MAAAA,QAAQ,CAACL,QAAQ,CAACW,OAAD,CAAT,CAAR;AAEAH,MAAAA,OAAO,CACLG,OAAO,CAACI,OAAR,CAAgBC,IAAhB,CAAsBC,MAAD,IAAY;AAC/B,eAAOA,MAAM,CAACC,EAAP,KAAcf,MAAM,CAACe,EAA5B;AACD,OAFD,CADK,CAAP;AAKD,KATD;AAUD,GAzB6B,EAyB3B,CAACf,MAAD,EAASE,QAAT,CAzB2B,CAA9B;;AA2BA,QAAMe,UAAU,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACvCnB,IAAAA,MAAM,CAACO,IAAP,CAAY,MAAZ,EAAoBY,MAApB,EAA4B;AAAED,MAAAA,QAAQ,EAAEA;AAAZ,KAA5B;AACD,GAFD;;AAIA,QAAME,mBAAmB,GAAIF,QAAD,IAAc;AACxC,QAAKjB,KAAK,CAACoB,IAAN,CAAWC,KAAX,KAAqB,CAArB,IAA0BrB,KAAK,CAACoB,IAAN,CAAWE,KAAX,KAAqB,CAAhD,IAAuDnB,IAAI,CAACoB,MAAL,KAAgB,cAAvE,IAAyFvB,KAAK,CAACW,OAAN,CAAcM,QAAd,EAAwBM,MAAxB,KAAmC,cAA5H,IAA+IvB,KAAK,CAACoB,IAAN,CAAWE,KAAX,KAAqB,CAArB,IAA0BnB,IAAI,CAACqB,IAAL,KAAc,SAAvL,IAAsMxB,KAAK,CAACoB,IAAN,CAAWE,KAAX,KAAqB,CAArB,IAA0BnB,IAAI,CAACqB,IAAL,KAAc,OAAlP,EAA4P;AAC1P,0BAAQ,yCAAR;AACD;;AAED,QAAIxB,KAAK,CAACoB,IAAN,CAAWE,KAAX,KAAqB,CAAzB,EAA4B;AAC1B,0BACE,0CACGvB,MAAM,CAACe,EAAP,KAAcd,KAAK,CAACW,OAAN,CAAcM,QAAd,EAAwBH,EAAtC,gBAA2C,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,QAAhB;AAAyB,QAAA,OAAO,EAAE,MAAME,UAAU,CAAChB,KAAK,CAACW,OAAN,CAAcM,QAAd,EAAwBH,EAAzB,EAA6B,aAA7B,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA3C,GAA0J,EAD7J,CADF;AAKD,KAND,MAMO,IAAId,KAAK,CAACoB,IAAN,CAAWE,KAAX,KAAqB,CAArB,IAA0BnB,IAAI,CAACqB,IAAL,KAAc,SAA5C,EAAuD;AAC5D,0BACE,0CACGzB,MAAM,CAACe,EAAP,KAAcd,KAAK,CAACW,OAAN,CAAcM,QAAd,EAAwBH,EAAtC,gBAA2C,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,QAAhB;AAAyB,QAAA,OAAO,EAAE,MAAME,UAAU,CAAChB,KAAK,CAACW,OAAN,CAAcM,QAAd,EAAwBH,EAAzB,EAA6B,aAA7B,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA3C,GAA0J,EAD7J,CADF;AAKD,KANM,MAMA,IAAId,KAAK,CAACoB,IAAN,CAAWE,KAAX,KAAqB,CAArB,IAA0BnB,IAAI,CAACqB,IAAL,KAAc,OAAxC,IAAmDrB,IAAI,CAACsB,QAAL,GAAgB,CAAnE,IAAwEzB,KAAK,CAACoB,IAAN,CAAWM,aAAX,KAA6B1B,KAAK,CAACW,OAAN,CAAcM,QAAd,EAAwBH,EAAjI,EAAqI;AAC1I,0BACE,0CACGf,MAAM,CAACe,EAAP,KAAcd,KAAK,CAACW,OAAN,CAAcM,QAAd,EAAwBH,EAAtC,gBAA2C,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,QAAhB;AAAyB,QAAA,OAAO,EAAE,MAAME,UAAU,CAAChB,KAAK,CAACW,OAAN,CAAcM,QAAd,EAAwBH,EAAzB,EAA6B,aAA7B,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA3C,GAA0J,EAD7J,CADF;AAKD,KANM,MAMA;AACL,0BAAQ,yCAAR;AACD;AACF,GA1BD;;AA4BA,QAAMa,WAAW,GAAIL,KAAD,IAAW;AAC7B,YAAOA,KAAP;AACE,WAAK,CAAL;AACE,eAAO,cAAP;;AACF,WAAK,CAAL;AACE,eAAO,eAAP;;AACF,WAAK,CAAL;AACE,eAAO,eAAP;;AACF;AACE,eAAO,EAAP;AARJ;AAUD,GAXD;;AAaA,QAAMM,QAAQ,GAAG3C,WAAW,CAAC,MAAM;AACjCgB,IAAAA,QAAQ,CAACJ,uBAAuB,CAAC,CAAD,CAAxB,CAAR;AACD,GAF2B,EAEzB,CAACI,QAAD,CAFyB,CAA5B;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,KAAK,CAACuB,MAAN,KAAiB,UAArB,EAAiC;AAC/BrB,MAAAA,OAAO,CAAC2B,IAAR,CAAc,aAAY7B,KAAK,CAACc,EAAG,EAAnC;AACD;;AAEDT,IAAAA,UAAU;AAEV,UAAMyB,eAAe,GAAGC,WAAW,CAACH,QAAD,EAAW,IAAX,CAAnC;AAEA,WAAO,MAAM;AACXI,MAAAA,aAAa,CAACF,eAAD,CAAb;AACD,KAFD;AAGD,GAZQ,EAYN,CAACzB,UAAD,EAAaH,OAAb,EAAsBF,KAAK,CAACc,EAA5B,EAAgCd,KAAK,CAACuB,MAAtC,EAA8CK,QAA9C,CAZM,CAAT;AAcA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAU5B,KAAK,CAACc,EAAhB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWd,KAAK,CAACoB,IAAN,CAAWE,KAAX,KAAqB,CAArB,GAAyB,UAAzB,GAAsC,YAAjD,QAAiEK,WAAW,CAAC3B,KAAK,CAACoB,IAAN,CAAWE,KAAZ,CAA5E,MAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAYtB,KAAK,CAACoB,IAAN,CAAWC,KAAvB,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBrB,KAAK,CAACoB,IAAN,CAAWa,QAA3B,MAJF,EAKG9B,IAAI,CAACqB,IAAL,KAAc,OAAd,gBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBrB,IAAI,CAACsB,QAArB,CAAxB,GAA8D,EALjE,eAOE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIS,MAAM,CAACC,IAAP,CAAYnC,KAAK,CAACW,OAAlB,EAA2ByB,GAA3B,CAA+B,CAACC,GAAD,EAAMC,KAAN,kBAC7B,oBAAC,SAAD,CAAW,IAAX;AAAgB,IAAA,SAAS,EAAC,mDAA1B;AAA8E,IAAA,GAAG,EAAEA,KAAnF;AAA0F,IAAA,MAAM,EAAEnC,IAAI,CAACoC,cAAL,KAAwBvC,KAAK,CAACW,OAAN,CAAc0B,GAAd,EAAmBvB,EAA3C,GAAgD,IAAhD,GAAuD,KAAzJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,KAAK,CAACW,OAAN,CAAc0B,GAAd,EAAmBG,KADtB,QAEGxC,KAAK,CAACW,OAAN,CAAc0B,GAAd,EAAmBvB,EAAnB,KAA0Bf,MAAM,CAACe,EAAjC,GAAuC,GAAEd,KAAK,CAACW,OAAN,CAAc0B,GAAd,EAAmBb,IAAK,KAAjE,GAAwE,EAF3E,EAGGxB,KAAK,CAACW,OAAN,CAAc0B,GAAd,EAAmBd,MAHtB,OAIGJ,mBAAmB,CAACkB,GAAD,CAJtB,CADF,CAFJ,CAPF,CADF,CADF,eAwBE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAxBF,CADF;AA8BD,CA5HD;;AA8HA,MAAMI,eAAe,GAAIC,KAAD,KAAY;AAClC3C,EAAAA,MAAM,EAAE2C,KAAK,CAAC3C,MADoB;AAElCC,EAAAA,KAAK,EAAE0C,KAAK,CAAC1C;AAFqB,CAAZ,CAAxB;;AAKA,eAAeX,OAAO,CAACoD,eAAD,CAAP,CAAyB3C,IAAzB,CAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport Chat from './Chat';\n\nimport { setLobby, reduceLobbyGameTimeLeft } from '../actions';\n\nconst Game = ({ socket, lobby, dispatch }) => {\n  const history = useHistory();\n  const [user, setUser] = useState({});\n\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', (message) => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        dispatch(setLobby(message));\n\n        setUser(\n          message.players.find((player) => {\n            return player.id === socket.id;\n          })\n        );\n      }\n    });\n\n    socket.on('lobbyStatus', (message) => {\n      console.log(message);\n      dispatch(setLobby(message));\n\n      setUser(\n        message.players.find((player) => {\n          return player.id === socket.id;\n        })\n      );\n    });\n  }, [socket, dispatch]);\n\n  const pickPlayer = (playerId, action) => {\n    socket.emit('game', action, { playerId: playerId });\n  };\n\n  const renderActionButtons = (playerId) => {\n    if ((lobby.game.round === 0 && lobby.game.phase === 0 ) || user.status !== 'PLAYER_ALIVE' || lobby.players[playerId].status !== 'PLAYER_ALIVE' || (lobby.game.phase === 1 && user.role !== 'WERWOLF') || (lobby.game.phase === 2 && user.role !== 'WITCH')) {\n      return (<></>);\n    }\n\n    if (lobby.game.phase === 0) {\n      return (\n        <>\n          {socket.id !== lobby.players[playerId].id ? <Button variant=\"danger\" onClick={() => pickPlayer(lobby.players[playerId].id, 'PLAYER_VOTE')}>VOTE</Button> : ''}\n        </>\n      );\n    } else if (lobby.game.phase === 1 && user.role === 'WERWOLF') {\n      return (\n        <>\n          {socket.id !== lobby.players[playerId].id ? <Button variant=\"danger\" onClick={() => pickPlayer(lobby.players[playerId].id, 'PLAYER_KILL')}>KILL</Button> : ''}\n        </>\n      );\n    } else if (lobby.game.phase === 2 && user.role === 'WITCH' && user.healLeft > 0 && lobby.game.werwolfTarget === lobby.players[playerId].id) {\n      return (\n        <>\n          {socket.id !== lobby.players[playerId].id ? <Button variant=\"danger\" onClick={() => pickPlayer(lobby.players[playerId].id, 'PLAYER_HEAL')}>HEAL</Button> : ''}\n        </>\n      );\n    } else {\n      return (<></>);\n    }\n  };\n\n  const renderPhase = (phase) => {\n    switch(phase) {\n      case 0:\n        return 'Voting Phase';\n      case 1:\n        return 'Werwolf Phase';\n      case 2:\n        return 'Healing Phase';\n      default:\n        return '';\n    }\n  }\n\n  const tickTime = useCallback(() => {\n    dispatch(reduceLobbyGameTimeLeft(1));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (lobby.status === 'GAME_END') {\n      history.push(`/game_end/${lobby.id}`);\n    }\n\n    fetchLobby();\n\n    const lobbyIntervalId = setInterval(tickTime, 1000);\n\n    return () => {\n      clearInterval(lobbyIntervalId);\n    };\n  }, [fetchLobby, history, lobby.id, lobby.status, tickTime]);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>Game {lobby.id}</h1>\n          <h3>Time: {lobby.game.phase === 0 ? 'day time' : 'night time'} ({renderPhase(lobby.game.phase)})</h3>\n          <h3>Round: {lobby.game.round}</h3>\n          <h3>Time left: {lobby.game.timeLeft}s</h3>\n          {user.role === 'WITCH' ? <h3>Heal left: {user.healLeft}</h3> : ''}\n\n          <ListGroup>\n            {\n              Object.keys(lobby.players).map((idx, index) => (\n                <ListGroup.Item className=\"d-flex justify-content-between align-items-center\" key={index} active={user.targetPlayerId === lobby.players[idx].id ? true : false}>\n                  {lobby.players[idx].alias} (\n                  {lobby.players[idx].id === socket.id ? `${lobby.players[idx].role} | ` : ''}\n                  {lobby.players[idx].status})\n                  {renderActionButtons(idx)}\n                </ListGroup.Item>\n              ))\n            }\n          </ListGroup>\n        </Col>\n      </Row>\n\n      <Row>\n        <Chat />\n      </Row>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}