{"ast":null,"code":"var _jsxFileName = \"/home/duybach/Desktop/whowolf-gui/src/components/Game.js\";\nimport React, { useCallback, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport Chat from './Chat';\nimport { setLobby } from '../actions';\n\nconst Game = ({\n  socket,\n  lobby,\n  dispatch\n}) => {\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', lobby.id, message => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        dispatch(setLobby(message));\n      }\n    });\n    socket.on('lobbyStatus', message => {\n      dispatch(setLobby(message));\n    });\n  }, [socket, dispatch, lobby.id]);\n\n  const pickPlayer = (playerId, action) => {\n    socket.emit('game', lobby.id, action, {\n      playerId: playerId\n    });\n  };\n\n  const renderActionButtons = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== id ? /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      onClick: () => pickPlayer(id, 'PLAYER_VOTE'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 29\n      }\n    }, \"X\") : '');\n  };\n\n  useEffect(() => {\n    if (lobby.status === 'GAME_END') {\n      history.push(`/game_end/${lobby.id}`);\n    }\n\n    fetchLobby();\n  }, [fetchLobby]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Game \", lobby.id), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Host: \", lobby.hostId), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"Time: \", lobby.game.phase === 0 ? 'day time' : 'night time', \" (\", lobby.game.round, \".\", lobby.game.phase, \")\"), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, Object.keys(lobby.players).map((id, index) => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    key: index,\n    active: lobby.players[socket.id].target === id ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, lobby.players[id].alias, \" (\", lobby.players[id].role, \")\", renderActionButtons()))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chat, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = state => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Game);","map":{"version":3,"sources":["/home/duybach/Desktop/whowolf-gui/src/components/Game.js"],"names":["React","useCallback","useEffect","connect","Button","Col","Container","ListGroup","Row","Chat","setLobby","Game","socket","lobby","dispatch","fetchLobby","emit","id","message","console","log","error","on","pickPlayer","playerId","action","renderActionButtons","status","history","push","hostId","game","phase","round","Object","keys","players","map","index","target","alias","role","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport Chat from './Chat';\n\nimport { setLobby } from '../actions';\n\nconst Game = ({ socket, lobby, dispatch }) => {\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', lobby.id, (message) => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        dispatch(setLobby(message));\n      }\n    });\n\n    socket.on('lobbyStatus', (message) => {\n      dispatch(setLobby(message));\n    });\n  }, [socket, dispatch, lobby.id]);\n\n  const pickPlayer = (playerId, action) => {\n    socket.emit('game', lobby.id, action, { playerId: playerId });\n  };\n\n  const renderActionButtons = () => {\n    return (\n      <>\n        {socket.id !== id ? <Button variant=\"danger\" onClick={() => pickPlayer(id, 'PLAYER_VOTE')}>X</Button> : ''}\n      </>\n    )\n  }\n\n  useEffect(() => {\n    if (lobby.status === 'GAME_END') {\n      history.push(`/game_end/${lobby.id}`);\n    }\n\n    fetchLobby();\n  }, [fetchLobby]);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>Game {lobby.id}</h1>\n          <h3>Host: {lobby.hostId}</h3>\n          <h3>Time: {lobby.game.phase === 0 ? 'day time' : 'night time'} ({lobby.game.round}.{lobby.game.phase})</h3>\n\n          <ListGroup>\n            {\n              Object.keys(lobby.players).map((id, index) => (\n                <ListGroup.Item key={index} active={lobby.players[socket.id].target === id ? true : false}>\n                  {lobby.players[id].alias} ({lobby.players[id].role})\n                  {renderActionButtons()}\n                </ListGroup.Item>\n              ))\n            }\n          </ListGroup>\n        </Col>\n      </Row>\n\n      <Row>\n        <Chat />\n      </Row>\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  socket: state.socket,\n  lobby: state.lobby\n})\n\nexport default connect(mapStateToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}