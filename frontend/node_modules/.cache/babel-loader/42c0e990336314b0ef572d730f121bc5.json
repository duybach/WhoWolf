{"ast":null,"code":"var _jsxFileName = \"/home/duybach/Desktop/whowolf-gui/src/components/Game.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport Chat from './Chat';\nimport { setLobby, reduceLobbyGameTimeLeft } from '../actions';\n\nconst Game = ({\n  socket,\n  lobby,\n  dispatch\n}) => {\n  const history = useHistory();\n  const [user, setUser] = useState({});\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', message => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        console.log(message);\n        dispatch(setLobby(message));\n        let user = message.players.filter(player => {\n          return player.id === socket.id;\n        })[0];\n        setUser(user[0]);\n      }\n    });\n    socket.on('lobbyStatus', message => {\n      console.log(message);\n      dispatch(setLobby(message));\n      let user = message.players.filter(player => {\n        return player.id === socket.id;\n      })[0];\n      setUser(user[0]);\n    });\n  }, [socket, dispatch]);\n\n  const pickPlayer = (playerId, action) => {\n    socket.emit('game', action, {\n      playerId: playerId\n    });\n  };\n\n  const renderActionButtons = playerId => {\n    if (lobby.game.round === 0 && lobby.game.phase === 0 || lobby.players[socket.id].status !== 'PLAYER_ALIVE' || lobby.players[playerId].status !== 'PLAYER_ALIVE' || lobby.game.phase === 1 && lobby.players[socket.id].role !== 'WERWOLF' || lobby.game.phase === 2 && lobby.players[socket.id].role !== 'WITCH') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (lobby.game.phase === 0) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== playerId ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(playerId, 'PLAYER_VOTE'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 37\n        }\n      }, \"VOTE\") : '');\n    } else if (lobby.game.phase === 1 && lobby.players[socket.id].role === 'WERWOLF') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== playerId ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(playerId, 'PLAYER_KILL'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 37\n        }\n      }, \"KILL\") : '');\n    } else if (lobby.game.phase === 2 && lobby.players[socket.id].role === 'WITCH' && lobby.game.werwolfTarget === playerId) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, socket.id !== playerId ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => pickPlayer(playerId, 'PLAYER_HEAL'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 37\n        }\n      }, \"HEAL\") : '');\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  };\n\n  const renderPhase = phase => {\n    switch (phase) {\n      case 0:\n        return 'Voting Phase';\n\n      case 1:\n        return 'Werwolf Phase';\n\n      case 2:\n        return 'Healing Phase';\n\n      default:\n        return '';\n    }\n  };\n\n  const tickTime = useCallback(() => {\n    dispatch(reduceLobbyGameTimeLeft(1));\n  }, [dispatch]);\n  useEffect(() => {\n    if (lobby.status === 'GAME_END') {\n      history.push(`/game_end/${lobby.id}`);\n    }\n\n    fetchLobby();\n    const lobbyIntervalId = setInterval(tickTime, 1000);\n    return () => {\n      clearInterval(lobbyIntervalId);\n    };\n  }, [fetchLobby, history, lobby.id, lobby.status, tickTime]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Game \", lobby.id), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Time: \", lobby.game.phase === 0 ? 'day time' : 'night time', \" (\", renderPhase(lobby.game.phase), \")\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"Time left: \", lobby.game.timeLeft, \"s\"), lobby.players[socket.id].role === 'WITCH' ? /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 56\n    }\n  }, \"Heal left: \", lobby.players[socket.id].healLeft) : '', /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, Object.keys(lobby.players).map((playerId, index) => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    key: index,\n    active: lobby.players[socket.id].targetPlayerId === playerId ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, lobby.players[playerId].alias, \" (\", playerId === socket.id ? `${lobby.players[playerId].role} | ` : '', lobby.players[playerId].status, \")\", renderActionButtons(playerId), lobby.players[playerId].targetPlayerId ? `Voted for ${lobby.players[playerId].targetPlayerId}` : ''))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chat, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = state => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Game);","map":{"version":3,"sources":["/home/duybach/Desktop/whowolf-gui/src/components/Game.js"],"names":["React","useCallback","useEffect","useState","useHistory","connect","Button","Col","Container","ListGroup","Row","Chat","setLobby","reduceLobbyGameTimeLeft","Game","socket","lobby","dispatch","history","user","setUser","fetchLobby","emit","message","console","log","error","players","filter","player","id","on","pickPlayer","playerId","action","renderActionButtons","game","round","phase","status","role","werwolfTarget","renderPhase","tickTime","push","lobbyIntervalId","setInterval","clearInterval","timeLeft","healLeft","Object","keys","map","index","targetPlayerId","alias","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport Chat from './Chat';\n\nimport { setLobby, reduceLobbyGameTimeLeft } from '../actions';\n\nconst Game = ({ socket, lobby, dispatch }) => {\n  const history = useHistory();\n  const [user, setUser] = useState({});\n\n  const fetchLobby = useCallback(() => {\n    socket.emit('lobbyStatus', (message) => {\n      if ('error' in message) {\n        console.log(message.error);\n      } else {\n        console.log(message);\n        dispatch(setLobby(message));\n\n        let user = message.players.filter(player => {\n          return player.id === socket.id;\n        })[0];\n        setUser(\n          user[0]\n        );\n      }\n    });\n\n    socket.on('lobbyStatus', (message) => {\n      console.log(message);\n      dispatch(setLobby(message));\n\n      let user = message.players.filter(player => {\n        return player.id === socket.id;\n      })[0];\n      setUser(\n        user[0]\n      );\n    });\n  }, [socket, dispatch]);\n\n  const pickPlayer = (playerId, action) => {\n    socket.emit('game', action, { playerId: playerId });\n  };\n\n  const renderActionButtons = (playerId) => {\n    if ((lobby.game.round === 0 && lobby.game.phase === 0 ) || lobby.players[socket.id].status !== 'PLAYER_ALIVE' || lobby.players[playerId].status !== 'PLAYER_ALIVE' || (lobby.game.phase === 1 && lobby.players[socket.id].role !== 'WERWOLF') || (lobby.game.phase === 2 && lobby.players[socket.id].role !== 'WITCH')) {\n      return (<></>);\n    }\n\n    if (lobby.game.phase === 0) {\n      return (\n        <>\n          {socket.id !== playerId ? <Button variant=\"danger\" onClick={() => pickPlayer(playerId, 'PLAYER_VOTE')}>VOTE</Button> : ''}\n        </>\n      );\n    } else if (lobby.game.phase === 1 && lobby.players[socket.id].role === 'WERWOLF') {\n      return (\n        <>\n          {socket.id !== playerId ? <Button variant=\"danger\" onClick={() => pickPlayer(playerId, 'PLAYER_KILL')}>KILL</Button> : ''}\n        </>\n      );\n    } else if (lobby.game.phase === 2 && lobby.players[socket.id].role === 'WITCH' && lobby.game.werwolfTarget === playerId) {\n      return (\n        <>\n          {socket.id !== playerId ? <Button variant=\"danger\" onClick={() => pickPlayer(playerId, 'PLAYER_HEAL')}>HEAL</Button> : ''}\n        </>\n      );\n    } else {\n      return (<></>);\n    }\n  };\n\n  const renderPhase = (phase) => {\n    switch(phase) {\n      case 0:\n        return 'Voting Phase';\n      case 1:\n        return 'Werwolf Phase';\n      case 2:\n        return 'Healing Phase';\n      default:\n        return '';\n    }\n  }\n\n  const tickTime = useCallback(() => {\n    dispatch(reduceLobbyGameTimeLeft(1));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (lobby.status === 'GAME_END') {\n      history.push(`/game_end/${lobby.id}`);\n    }\n\n    fetchLobby();\n\n    const lobbyIntervalId = setInterval(tickTime, 1000);\n\n    return () => {\n      clearInterval(lobbyIntervalId);\n    };\n  }, [fetchLobby, history, lobby.id, lobby.status, tickTime]);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>Game {lobby.id}</h1>\n          <h3>Time: {lobby.game.phase === 0 ? 'day time' : 'night time'} ({renderPhase(lobby.game.phase)})</h3>\n          <h3>Time left: {lobby.game.timeLeft}s</h3>\n          {lobby.players[socket.id].role === 'WITCH' ? <h3>Heal left: {lobby.players[socket.id].healLeft}</h3> : ''}\n\n          <ListGroup>\n            {\n              Object.keys(lobby.players).map((playerId, index) => (\n                <ListGroup.Item key={index} active={lobby.players[socket.id].targetPlayerId === playerId ? true : false}>\n                  {lobby.players[playerId].alias} (\n                  {playerId === socket.id ? `${lobby.players[playerId].role} | ` : ''}\n                  {lobby.players[playerId].status})\n                  {renderActionButtons(playerId)}\n\n                  {lobby.players[playerId].targetPlayerId ? `Voted for ${lobby.players[playerId].targetPlayerId}` : ''}\n                </ListGroup.Item>\n              ))\n            }\n          </ListGroup>\n        </Col>\n      </Row>\n\n      <Row>\n        <Chat />\n      </Row>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  socket: state.socket,\n  lobby: state.lobby\n});\n\nexport default connect(mapStateToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}